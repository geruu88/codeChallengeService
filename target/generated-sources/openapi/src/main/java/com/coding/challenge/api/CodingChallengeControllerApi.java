/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.coding.challenge.api;

import com.coding.challenge.model.ErrorDetails;
import com.coding.challenge.model.PlayerGGR;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-26T10:51:52.430406600+02:00[Europe/Sofia]")
@Validated
@Tag(name = "CodingChallengeController", description = "the CodingChallengeController API")
public interface CodingChallengeControllerApi {

    /**
     * GET /players/largest-ggr : Retrieve player with largest GGR
     * Retrieve player with largest GGR, matching the pagination filter.
     *
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Players not found (status code 404)
     */
    @Operation(
        operationId = "getPlayerWithLargestGGR",
        summary = "Retrieve player with largest GGR",
        tags = { "coding-challenge-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PlayerGGR.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Players not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/players/largest-ggr",
        produces = { "application/json" }
    )
    ResponseEntity<PlayerGGR> getPlayerWithLargestGGR(
        @Parameter(name = "page", description = "") @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "pageSize", description = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    );

}
