/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.codingchallenge.api;

import com.amusnet.service.model.Player;
import com.amusnet.service.model.PlayersFilter;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-25T16:45:49.724821500+02:00[Europe/Sofia]")
@Validated
@Tag(name = "Players", description = "Operations related to Players")
public interface PlayersApi {

    /**
     * GET /players/{playerId} : Find player by ID
     * Returns a single player
     *
     * @param playerId ID of player to return (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getPlayerById",
        summary = "Find player by ID",
        tags = { "players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Player.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/players/{playerId}",
        produces = { "application/json" }
    )
    ResponseEntity<Player> getPlayerById(
        @Parameter(name = "playerId", description = "ID of player to return", required = true) @PathVariable("playerId") Long playerId
    );


    /**
     * GET /players : Retrieve all the players
     * Returns all the players matching the filter
     *
     * @param playersFilter  (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getPlayers",
        summary = "Retrieve all the players",
        tags = { "players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Player.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/players",
        produces = { "application/json" }
    )
    ResponseEntity<List<Player>> getPlayers(
        @NotNull @Parameter(name = "playersFilter", description = "", required = true) @Valid @RequestParam PlayersFilter playersFilter
    );

}
